@page "/stats/{teamNumber}"
@using FrcScouting.JsonObjects.TeamYear
@using FrcScouting.JsonObjects.Year
@attribute [StreamRendering]

<PageTitle>Stats</PageTitle>

@if (failed)
{
    <h1>failed to load team or year</h1>
}
else
{
    if (team != null)
    {
        <h1>@team.name @teamNumber</h1>

        <p>data is in epa (sort of like chess elo). Read about it <a href="https://www.statbotics.io/blog/epa">here</a></p>

        <table class="table" style="width: 500px">
            <thead>
            <tr>
                <th>point type</th>
                <th>mean</th>
                <th>deviation</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var pair in teamMeanStandards)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td style="background-color: @getRG(pair.Key)">@pair.Value.mean</td>
                    <td>@pair.Value.sd</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <h1>loading...</h1>
        <p>if this takes a long time then the team number is likely wrong or the statbotics server is down</p>
    }
}

@code {
    bool failed = false;
    [Parameter] 
    public string? teamNumber { get; set; }
    TeamYear? team;
    Year currentYear;
    int year = 2024;
    Dictionary<string, double> means;
    Dictionary<string, Mean_Standard> teamMeanStandards;
    Dictionary<string, Percentile> percentiles;
    protected override async Task OnInitializedAsync()
    {
        
        ApiRequest<TeamYear> apiTeam = await StatboticsApiInterface.getTeam(int.Parse(teamNumber));
        if (!apiTeam.Result)
        {
            failed = true;
            return;
        }

        team = apiTeam.ParsedResponse;
        if (YearData.Years.TryGetValue(2024, out var year1))
        {
            currentYear = year1;
        }
        else
        {
            ApiRequest<Year> apiYear = await StatboticsApiInterface.getYear(2024);
            if (!apiYear.Result)
            {
                failed = true;
                return;
            }
            YearData.Years.Add(2024, apiYear.ParsedResponse);
            currentYear = YearData.Years[2024];
        }
        means = currentYear.breakdown.getPoints();
        teamMeanStandards = team.epa.breakdown.getPoints();
        percentiles = currentYear.percentiles.getPoints();
    }

    public string getRG(string key)
    {
        if (!percentiles.ContainsKey(key))
            return "#ffffff";
        
        int greenOffset = 0;
        int redOffset = 0;

        double topPercent = percentiles[key].p99;
        double botPercent = percentiles[key].p25;

        if (teamMeanStandards[key].mean < botPercent)
            return "#4f0500";
        if (teamMeanStandards[key].mean > topPercent)
            return "#0000ff";

        greenOffset = (int)Math.Floor(((teamMeanStandards[key].mean - botPercent) / topPercent) * 256);
        redOffset = 256 - greenOffset;

        return "#" + redOffset.ToString("X").ToLower() + greenOffset.ToString("X").ToLower() + "00";
    }
}
