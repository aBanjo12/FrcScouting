@page "/stats"
@using FrcScouting.JsonObjects.TeamYear
@attribute [StreamRendering]

<PageTitle>Stats</PageTitle>

@if (team != null)
{
    <h1>@team.name</h1>

    <p>data is in epa (sort of like chess elo). Read about it <a href="https://www.statbotics.io/blog/epa">here</a></p>

    <table class="table" style="width: 500px">
        <thead>
        <tr>
            <th>point type</th>
            <th>mean</th>
            <th>deviation</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var pair in team.epa.breakdown.getPoints())
        {
            <tr>
                <td>@pair.Key</td>
                <td>@pair.Value.mean</td>
                <td>@pair.Value.sd</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <h1>loading...</h1>
}


@code {

    TeamYear? team;
    protected override async Task OnInitializedAsync()
    {
        team = await ApiInterface.get1014();
    }


    //private WeatherForecast[]? forecasts;

    // protected override async Task OnInitializedAsync()
    // {
    //     // Simulate asynchronous loading to demonstrate streaming rendering
    //     await Task.Delay(500);
    //
    //     var startDate = DateOnly.FromDateTime(DateTime.Now);
    //     var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
    //     forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
    //     {
    //         Date = startDate.AddDays(index),
    //         TemperatureC = Random.Shared.Next(-20, 55),
    //         Summary = summaries[Random.Shared.Next(summaries.Length)]
    //     }).ToArray();
    // }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}